package com.savefish.screens.game;

import java.util.logging.Level;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.savefish.constant.Constant;
import com.savefish.physics.resolve.GreenWorldFactory;
import com.savefish.util.logger.GreenLogger;

public class MiddleStage extends Stage {

	public MiddleStage(float width, float height, boolean stretch)
			throws Exception {
		super(width, height, stretch);
		this.initCamera();
		this.initRender();
		this.initWorld();
	}

	private OrthographicCamera camera;

	private void initCamera() {
		GreenLogger.getInstance().logp(Level.INFO, GameScreen.class.getName(),
				"initCamera", "called!");

		camera = new OrthographicCamera(Constant.physics.CAMERA_VIEW_WIDTH,
				Constant.physics.CAMERA_VIEW_HEIGHT);
		camera.position.set(Constant.physics.CAMERA_X,
				Constant.physics.CAMERA_Y, Constant.physics.CAMERA_Z);
	}

	private World world;

	private void initWorld() throws Exception {
		GreenLogger.getInstance().logp(Level.INFO, GameScreen.class.getName(),
				"initWorld", "called!");

		world = GreenWorldFactory.creatWorld(Constant.asset.MAPS_BASE_PATH
				+ Constant.asset.PREVENT_FIRST);
	}

	private Box2DDebugRenderer render;

	private void initRender() {
		GreenLogger.getInstance().logp(Level.INFO, GameScreen.class.getName(),
				"initRender", "called!");

		render = new Box2DDebugRenderer();
	}

	public void render(float delta) {
		this.world.step(delta, 3, 3);
		GL10 gl = Gdx.graphics.getGL10();
		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		this.camera.update();
		this.camera.apply(gl);
		this.render.render(world, this.camera.combined);
	}

	@Override
	public void dispose() {
		this.render.dispose();
		this.world.dispose();
		this.render = null;
		this.world = null;
		super.dispose();
	}

	@Override
	public boolean touchDown(int x, int y, int pointer, int button) {
		// TODO Auto-generated method stub
		return super.touchDown(x, y, pointer, button);
	}

	@Override
	public boolean touchUp(int x, int y, int pointer, int button) {
		// TODO Auto-generated method stub
		return super.touchUp(x, y, pointer, button);
	}

	@Override
	public boolean touchDragged(int x, int y, int pointer) {
		// TODO Auto-generated method stub
		return super.touchDragged(x, y, pointer);
	}

	@Override
	public boolean touchMoved(int x, int y) {
		// TODO Auto-generated method stub
		return super.touchMoved(x, y);
	}
	
	

}
